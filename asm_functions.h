#pragma once

// PPC assembly source code that will need to be in the output patch file.

const char save_registers_func[] = {
        "\n"
        "; Push all general purpose registers and link register to the stack.\n"
        "; These will be restored before branching back to the original game code.\n"
        "stwu r0, -4(r1)\n"
        "stwu r2, -4(r1)\n"
        "stwu r3, -4(r1)\n"
        "stwu r4, -4(r1)\n"
        "stwu r5, -4(r1)\n"
        "stwu r6, -4(r1)\n"
        "stwu r7, -4(r1)\n"
        "stwu r8, -4(r1)\n"
        "stwu r9, -4(r1)\n"
        "stwu r10, -4(r1)\n"
        "stwu r11, -4(r1)\n"
        "stwu r12, -4(r1)\n"
        "stwu r13, -4(r1)\n"
        "stwu r14, -4(r1)\n"
        "stwu r15, -4(r1)\n"
        "stwu r16, -4(r1)\n"
        "stwu r17, -4(r1)\n"
        "stwu r18, -4(r1)\n"
        "stwu r19, -4(r1)\n"
        "stwu r20, -4(r1)\n"
        "stwu r21, -4(r1)\n"
        "stwu r22, -4(r1)\n"
        "stwu r23, -4(r1)\n"
        "stwu r24, -4(r1)\n"
        "stwu r25, -4(r1)\n"
        "stwu r26, -4(r1)\n"
        "stwu r27, -4(r1)\n"
        "stwu r28, -4(r1)\n"
        "stwu r29, -4(r1)\n"
        "stwu r30, -4(r1)\n"
        "stwu r31, -4(r1)\n"
        "mflr r31\n"
        "stwu r31, -4(r1)\n"
        "stfdu f0, -4(r1)\n"
        "stfdu f1, -4(r1)\n"
        "stfdu f2, -4(r1)\n"
        "stfdu f3, -4(r1)\n"
        "stfdu f4, -4(r1)\n"
        "stfdu f5, -4(r1)\n"
        "stfdu f6, -4(r1)\n"
        "stfdu f7, -4(r1)\n"
        "stfdu f8, -4(r1)\n"
        "stfdu f9, -4(r1)\n"
        "stfdu f10, -4(r1)\n"
        "stfdu f11, -4(r1)\n"
        "stfdu f12, -4(r1)\n"
        "stfdu f13, -4(r1)\n"
        "stfdu f14, -4(r1)\n"
        "stfdu f15, -4(r1)\n"
        "stfdu f16, -4(r1)\n"
        "stfdu f17, -4(r1)\n"
        "stfdu f18, -4(r1)\n"
        "stfdu f19, -4(r1)\n"
        "stfdu f20, -4(r1)\n"
        "stfdu f21, -4(r1)\n"
        "stfdu f22, -4(r1)\n"
        "stfdu f23, -4(r1)\n"
        "stfdu f24, -4(r1)\n"
        "stfdu f25, -4(r1)\n"
        "stfdu f26, -4(r1)\n"
        "stfdu f27, -4(r1)\n"
        "stfdu f28, -4(r1)\n"
        "stfdu f29, -4(r1)\n"
        "stfdu f30, -4(r1)\n"
        "stfdu f31, -4(r1)\n"
};

const char restore_registers_func[] = {
        "\n; Restore registers from stack\n"
        "lfdu f31, 4(r1)\n"
        "lfdu f30, 4(r1)\n"
        "lfdu f29, 4(r1)\n"
        "lfdu f28, 4(r1)\n"
        "lfdu f27, 4(r1)\n"
        "lfdu f26, 4(r1)\n"
        "lfdu f25, 4(r1)\n"
        "lfdu f24, 4(r1)\n"
        "lfdu f23, 4(r1)\n"
        "lfdu f22, 4(r1)\n"
        "lfdu f21, 4(r1)\n"
        "lfdu f20, 4(r1)\n"
        "lfdu f19, 4(r1)\n"
        "lfdu f18, 4(r1)\n"
        "lfdu f17, 4(r1)\n"
        "lfdu f16, 4(r1)\n"
        "lfdu f15, 4(r1)\n"
        "lfdu f14, 4(r1)\n"
        "lfdu f13, 4(r1)\n"
        "lfdu f12, 4(r1)\n"
        "lfdu f11, 4(r1)\n"
        "lfdu f10, 4(r1)\n"
        "lfdu f9, 4(r1)\n"
        "lfdu f8, 4(r1)\n"
        "lfdu f7, 4(r1)\n"
        "lfdu f6, 4(r1)\n"
        "lfdu f5, 4(r1)\n"
        "lfdu f4, 4(r1)\n"
        "lfdu f3, 4(r1)\n"
        "lfdu f2, 4(r1)\n"
        "lfdu f1, 4(r1)\n"
        "lfdu f0, 4(r1)\n"
        "lwzu r31, 0(r1)\n"
        "mtlr r31\n"
        "lwzu r31, 4(r1)\n"
        "lwzu r30, 4(r1)\n"
        "lwzu r29, 4(r1)\n"
        "lwzu r28, 4(r1)\n"
        "lwzu r27, 4(r1)\n"
        "lwzu r26, 4(r1)\n"
        "lwzu r25, 4(r1)\n"
        "lwzu r24, 4(r1)\n"
        "lwzu r23, 4(r1)\n"
        "lwzu r22, 4(r1)\n"
        "lwzu r21, 4(r1)\n"
        "lwzu r20, 4(r1)\n"
        "lwzu r19, 4(r1)\n"
        "lwzu r18, 4(r1)\n"
        "lwzu r17, 4(r1)\n"
        "lwzu r16, 4(r1)\n"
        "lwzu r15, 4(r1)\n"
        "lwzu r14, 4(r1)\n"
        "lwzu r13, 4(r1)\n"
        "lwzu r12, 4(r1)\n"
        "lwzu r11, 4(r1)\n"
        "lwzu r10, 4(r1)\n"
        "lwzu r9,  4(r1)\n"
        "lwzu r8,  4(r1)\n"
        "lwzu r7,  4(r1)\n"
        "lwzu r6,  4(r1)\n"
        "lwzu r5,  4(r1)\n"
        "lwzu r4,  4(r1)\n"
        "lwzu r3,  4(r1)\n"
        "lwzu r2,  4(r1)\n"
        "lwzu r0,  4(r1)\n"
        "addi r1, r1, 4\n"
        "b return_address\n"
};
